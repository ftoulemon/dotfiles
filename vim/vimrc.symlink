set encoding=utf-8          " Specify the utf-8 encoding
set fileencodings=ucs-bom,utf-8,latin1 " Allows encoding detection
set term=xterm-256color
set t_Co=256


" {{{ Vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'mileszs/ack.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'aklt/plantuml-syntax'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'skwp/greplace.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Valloric/YouCompleteMe'
Plugin 'junegunn/vim-easy-align'
Plugin 'rhysd/vim-clang-format'
Plugin 'tell-k/vim-autopep8'
Plugin 'pboettch/vim-cmake-syntax'
"Plugin 'taketwo/vim-ros'
" At the end
Plugin 'ryanoasis/vim-devicons'

call vundle#end()
filetype plugin indent on
" }}}

" {{{ plugin

" load pathogen
"call pathogen#infect()

" jedi-vim
" Disable completion, use YCM
let g:jedi#completions_enabled = 0

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline_theme='powerlineish'


" Tagbar
let g:tagbar_systemenc = 'cp936'
set tags=./.tags;/

" Syntastic
let g:syntastic_auto_loc_list=0
let g:syntastic_loc_list_height=4
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_cpp_checkers = ['cppcheck']
let g:syntastic_python_pylint_rcfile = '~/.pylintrc'
let g:syntastic_stl_format = "[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]"
let g:syntastic_cppcheck_config_file = 'config.cppcheck'
let g:syntastic_tex_checkers = ['lacheck', 'text/language_check']

" NerdTree
let NERDTreeIgnore=['.o$[[file]]', '^moc_[[file]]', '\.pyc$']
let NERDTreeSortOrder=['\/$', '\.c$', '\.cpp$', '\.h$', '*', '\.swp$',  '\.bak$', '\~$']

" Doxygen
let g:DoxygenToolkit_authorName="Florentin Toulemon"

" Ag
let g:ackprg = 'ag --nogroup --nocolor --column'
cnoreabbrev Ack Ack!
nnoremap <leader>a :Ack!<space>

" plantuml
let g:plantuml_executable_script='java -jar ~/dev/uml/plantuml.jar'

" Ctrl-P
set runtimepath^=~/.vim/bundle/ctrlp.vim
set wildignore+=*/tmp/*,*.so,*.swp,*zip,*/__pycache__/*,*.pyc
let g:ctrlp_extensions = ['buffertag']

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" ag is fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 0

" Greplace
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

" Indent guides
set ts=4 sw=4 et
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" vimwiki
"let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" YCM
let g:ycm_python_binary_path = 'python'
let g:ycm_server_python_interpreter = 'python'
let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/ycm_extra_conf.py'

" Easy align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vim-ros
let g:ycm_semantic_triggers = {
\   'roslaunch' : ['="', '$(', '/'],
\   'rosmsg,rossrv,rosaction' : ['re!^', '/'],
\ }
" Controls which package to build
" g:ros_make [current|all] 
" Which build system to use
" g:ros_build_system [catkin|rosbuild|catkin-tools] 
" Additional options for catkin_make (i.e '-j4 -DCMAKE_BUILD_TYPE=Debug' ...)
" g:ros_catkin_make_options

" Autopep8
let g:autopep8_max_line_length=120
let g:autopep8_ignore=""
let g:autopep8_aggressive=2

" Clang-format
let g:clang_format#style_options = {
            \ "BasedOnStyle": "LLVM",
            \ "Standard": "C++11",
            \ "Language": "JavaScript",
            \ "AllowShortBlocksOnASingleLine": "false",
            \ "AllowShortFunctionsOnASingleLine": "false",
            \ "AllowShortIfStatementsOnASingleLine": "false",
            \ "AllowShortLoopsOnASingleLine": "false",
            \ "BreakBeforeBraces": "Attach",
            \ "ColumnLimit": 80,
            \ "UseTab": "false",
            \ "IndentWidth": 4,
            \ "TabWidth": 4}

" }}}

" misc options
" {{{ interface
" lines, cols in status line
set ruler
set rulerformat=%=%h%m%r%w\ %(%c%V%),%l/%L\ %P

" a - terse messages (like [+] instead of [Modified]
" t - truncate file names
" I - no intro message when starting vim fileless
" T - truncate long messages to avoid having to hit a key
set shortmess=atTI

" display the number of (characters|lines) in visual mode, also cur command
set showcmd

" current mode in status line
set showmode

" max items in popup menu
set pumheight=8

" show number column
set number
set numberwidth=3
set relativenumber

" show fold column, fold by markers
"set foldcolumn=2
set foldmethod=indent
set foldlevelstart=20

" indicate when a line is wrapped by prefixing wrapped line with '> '
set showbreak=>\ 

" always show tab line
set showtabline=2

" highlight search matches
set hlsearch
" Incremental search
set incsearch

set laststatus=2
" }}}
" {{{ behavior
set nocompatible
syntax on
filetype on
set nocp 	" for omnicpp
filetype plugin on

" fast terminal for smoother redrawing
set ttyfast

set omnifunc=syntaxcomplete#Complete

" indentation options
" Note: smartindent is seriously outdated. cindent, even, is unnecessary.
" Let the filetype plugins do the work.
set shiftwidth=4
set tabstop=4
"filetype indent on
set autoindent
"set cindent
set expandtab 	"Tabs with spaces, not tabs

" show matching enclosing chars for .1 sec
set showmatch
set matchtime=1

" t: autowrap text using textwidth
" l: long lines are not broken in insert mode
" c: autowrap comments using textwidth, inserting leader
" r: insert comment leader after <CR>
" o: insert comment leader after o or O
set formatoptions-=t
set formatoptions+=lcro
set textwidth=80

" context while scrolling
set scrolloff=3

" arrow keys, bs, space wrap to next/prev line
set whichwrap=b,s,<,>,[,]

" backspace over anything
set backspace=indent,eol,start

" case insensitive search if all lowercase
set ignorecase smartcase

" turn off bells, change to screen flash
set visualbell

" show our whitespace
set listchars=tab:\|\ ,trail:␣
set list

" complete to longest match, then list possibilities
set wildmenu
set wildmode=list:longest,full " Autocompletion settings
set wildignore+=*.pyc,*.o,*.aux,*.toc,*.dvi
set completeopt=longest,menu,preview " Brings a cool completion view
set complete=.,w,b,u,U,t,i,d    " mega tab completion
set omnifunc=synthaxcomplete#Complete

" turn off swap files
set noswapfile

" options for diff mode
set diffopt=filler
set diffopt+=context:4
set diffopt+=iwhite
set diffopt+=vertical

" keep a lot of history
set history=100

" keep lots of stuff
set viminfo+=:100
set viminfo+=/100

" don't duplicate an existing open buffer
set switchbuf=useopen

if has("autocmd")
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
endif

" Mouse management
set mouse=a

autocmd BufRead,BufNewFile *.template set filetype=javascript

let g:tex_flavor='latex'
autocmd FileType latex,tex,text :call SetupTex()

function! SetupTex()
    set textwidth=80
    set wrap
    " setlocal spell spelllang=fr
    let g:syntastic_auto_loc_list=0
endfunction

" }}}

" {{{ colors
set background=dark

highlight SpecialKey cterm=bold ctermfg=0
" tabe line colors
highlight TabLineFill ctermfg=DarkGray
highlight TabLineSel ctermfg=4 ctermbg=DarkGray cterm=bold
highlight TabLine ctermfg=7 cterm=none ctermbg=DarkGray

" number column colors
highlight LineNr cterm=none ctermbg=none ctermfg=4

" fold colors
highlight Folded cterm=none ctermbg=none ctermfg=4
highlight FoldColumn cterm=none ctermbg=none ctermfg=4

" visual mode colors
highlight Visual ctermbg=7 ctermfg=4
" normal mode color
"highlight Normal cterm=none ctermbg=none

" dictionary menu colors
highlight Pmenu ctermbg=7 ctermfg=0
highlight PmenuSel ctermbg=Blue ctermfg=0

" diff colors
highlight DiffAdd cterm=none ctermbg=4
highlight DiffDelete cterm=none ctermbg=4
highlight DiffChange cterm=none ctermbg=4
highlight DiffText cterm=none ctermbg=4

" GitGutter colors
highlight GitGutterAdd cterm=bold ctermbg=none ctermfg=green
highlight GitGutterChange cterm=bold ctermbg=none
highlight GitGutterDelete cterm=bold ctermbg=none ctermfg=red
highlight GitGutterChangeDelete cterm=bold ctermbg=none

" Sign column
highlight SignColumn cterm=none ctermbg=none

" keep cursor column last so it overrides all others
" highlight position of cursor
set cursorline
highlight CursorLine cterm=none ctermbg=Black

highlight Search cterm=none ctermbg=7 ctermfg=4
" }}}

" {{{ filetype dependent
autocmd BufNewFile,BufRead *.html setlocal commentstring=<!--%s-->
" ruby commenstring
autocmd FileType ruby setlocal commentstring=#%s
" make help navigation easier
autocmd FileType help nnoremap <buffer> <CR> <C-]>
autocmd FileType help nnoremap <buffer> <BS> <C-T>
" Remove trailing characters
autocmd FileType c,cpp,java,php,python,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
"}}}
"netrw options {{{
let g:netrw_sort_sequence = '[\/]$,\.php,\.phtml,*,\.info$,\.swp$,\.bak$,\~$'
"}}}
"{{{html options
let html_use_css = 1
"}}}
"{{{spelling
set spelllang=en
set spellsuggest=best,10
set spl=en
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
"}}}

"{{{dmenu
" Strip the newline from the end of a string
function! Chomp(str)
  return substitute(a:str, '\n$', '', '')
endfunction

" Find a file and pass it to cmd
function! DmenuOpen(cmd)
  let fname = Chomp(system("git ls-files | dmenu -i -l 20 -p " . a:cmd))
  if empty(fname)
    return
  endif
  execute a:cmd . " " . fname
endfunction

map <c-t> :call DmenuOpen("tabe")<cr>
map <c-f> :call DmenuOpen("e")<cr>
"}}}

" mappings
" {{{ general
let mapleader = "\\"
" easier move screen up/down
nmap <C-j> <C-e>
nmap <C-k> <C-y>
nmap <space> za
" turns off highlighting
nmap <Leader>/ :nohl<CR>
" search for highlighted text
vmap // y/<C-R>"<CR>
" keep block highlighted when indenting
vmap >> >gv
vmap << <gv
" fix a block of XML; inserts newlines, indents properly, folds by indent
nmap <Leader>fx :setlocal filetype=xml<CR>:%s/></>\r</g<CR>:1,$!xmllint --format -<CR>:setlocal foldmethod=indent<CR>
" fix syntax highlighting
nmap <Leader>ss :syntax sync fromstart<CR>
" toggle gundo
nmap <Leader>gu :GundoToggle<CR>
" make arrow keys useful
" use them to swap between split windows
nmap <left> <C-W>h
nmap <right> <C-W>l
nmap <up> <C-W>k
nmap <down> <C-W>j
" resize the windows
nmap <silent> <S-Up> <C-w>+
nmap <silent> <S-Down> <C-w>-
nmap <silent> <S-Left> <C-w><
nmap <silent> <S-Right> <C-w>>
" Auto brackets
inoremap (( ()<Esc>i
inoremap [[ []<Esc>i
inoremap {{ {}<Esc>i
inoremap "" ""<Esc>i
vnoremap ' <Esc>`>a'<Esc>`<i'<Esc>
vnoremap ( <Esc>`>a)<Esc>`<i(<Esc>
inoremap '' ''<Esc>i
inoremap `` ``<Esc>i
"}}}
"f keys {{{
map <F2> :tabprevious<CR>
map <F3> :tabnext<CR>
map <silent> <F4> :exe "silent! tabmove " . (tabpagenr() - 2)<CR>
map <silent> <F5> :exe "silent! tabmove " . tabpagenr()<CR>
map <F6> :bp<CR>
map <F7> :bn<CR>
"map <F6> :match ErrorMsg /\%>80v.\+/<CR>
"map <F7> :match Normal /\%>80v.\+/<CR>
nmap <F8> :NERDTreeToggle<CR>
nmap <C-F8> :TagbarToggle<CR>
map <F9> :set paste<CR>
map <C-F9> :set nopaste<CR>
map <F10> :set nospell<CR>
" <F11> don't use; terminal full-screen
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
map <F12> :!ctags -R -f .tags .<CR>
" }}}

"{{{ctags stuff
nmap <Leader>tf :call CtagsFind(expand('<cword>'))<CR>
com! -nargs=+ Tf :call CtagsFind("<args>")
" split window and search for tag
nmap <Leader>ts :exe('stj '.expand('<cword>'))<CR>

" open new tab and search for tag
fun! CtagsFind(keyword)
	tabe
	exe "tj ".a:keyword
endfunction
"}}}

" stand-alone components
"{{{ BUF TAB MGMT

function DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction
"}}}
